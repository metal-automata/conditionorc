// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/serverEnroll/{uuid}": {
            "post": {
                "description": "Creates a server record in FleetDB and schedules an inventory condition on the device.\nIt will create a new server ID if UUID is not provided.\nSample server enroll request and response: https://github.com/metal-automata/conditionorc/blob/main/sample/serverenroll.md",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Server Enroll",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_conditions_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/serverProvision": {
            "post": {
                "description": "an API to perform the server provision.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Server Provision",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_conditions_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/{uuid}": {
            "delete": {
                "description": "Delete a server from FleetDB\nSample server delete request and response: https://github.com/metal-automata/conditionorc/blob/main/sample/serverenroll.md",
                "summary": "Server Delete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_conditions_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/{uuid}/biosControl": {
            "post": {
                "description": "Controls the BIOS of the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Bios Control",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "bios control options",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/condition.BiosControlTaskParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_conditions_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/{uuid}/condition": {
            "get": {
                "description": "Returns the active/pending Condition for the serverID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "ConditionGet",
                "operationId": "conditionGet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition Kind",
                        "name": "conditionKind",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_orchestrator_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/{uuid}/condition-status/{conditionKind}/{conditionID}": {
            "put": {
                "description": "Publishes an update to the Condition StatusValue KV",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "ConditionStatusUpdate",
                "operationId": "conditionStatusUpdate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition Kind",
                        "name": "conditionKind",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition ID",
                        "name": "conditionID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Only update timestamp in the StatusValue entry",
                        "name": "ts_update",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_orchestrator_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/{uuid}/condition-task/{conditionKind}": {
            "get": {
                "description": "Queries a *rivets.Task object from KV for a condition\nControllers will not have always know the taskID and so this enables querying\nthe active Task object using the serverID, conditionKind parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "taskQuery returns the active/pending condition for a serverID",
                "operationId": "taskQuery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition Kind",
                        "name": "conditionKind",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_orchestrator_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/{uuid}/condition-task/{conditionKind}/{conditionID}": {
            "post": {
                "description": "Publishes a *rivets.Task object to the KV for a condition",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "taskPublish",
                "operationId": "taskPublish",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition Kind",
                        "name": "conditionKind",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition ID",
                        "name": "conditionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_orchestrator_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/{uuid}/condition/{conditionKind}": {
            "post": {
                "description": "Creates a condition on a server\nSample firmwareInstall payload, response: https://github.com/metal-automata/conditionorc/blob/main/sample/firmwareInstall.md",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Condition Create",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition Kind",
                        "name": "conditionKind",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_conditions_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/{uuid}/firmwareInstall": {
            "post": {
                "description": "Installs firmware on a device and validates with a subsequent inventory\nSample firmwareInstall payload, response: https://github.com/metal-automata/conditionorc/blob/main/sample/firmwareInstall.md",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Firmware Install",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "firmware install options",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/condition.FirmwareInstallTaskParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_conditions_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/{uuid}/status": {
            "get": {
                "description": "Returns condition of a server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Condition Status",
                "operationId": "conditionStatus",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_conditions_types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/validateFirmware": {
            "post": {
                "description": "Initiates a firmware install, an inventory, and a firmware validation in a single workflow.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Validate Firmware",
                "parameters": [
                    {
                        "description": "firmware validation options: server id and firmware set id",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.FirmwareValidationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_metal-automata_conditionorc_pkg_api_v1_conditions_types.ServerResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.Capability": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                }
            }
        },
        "common.Firmware": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "string"
                },
                "installed": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "previous": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.Firmware"
                    }
                },
                "software_id": {
                    "type": "string"
                }
            }
        },
        "common.Status": {
            "type": "object",
            "properties": {
                "health": {
                    "type": "string"
                },
                "post_code": {
                    "type": "integer"
                },
                "post_code_status": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "condition.BiosControlAction": {
            "type": "string",
            "enum": [
                "reset_config",
                "set_config"
            ],
            "x-enum-varnames": [
                "ResetConfig",
                "SetConfig"
            ]
        },
        "condition.BiosControlTaskParameters": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "The bios control action to be performed\n\nRequired: true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/condition.BiosControlAction"
                        }
                    ]
                },
                "asset_id": {
                    "description": "Identifier for the Asset in the Asset store.\n\nRequired: true",
                    "type": "string"
                },
                "bios_config_url": {
                    "description": "The URL for the bios configuration settings file.\nNeeded for BiosControlAction.SetConfig\n\nRequired: false",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.URL"
                        }
                    ]
                }
            }
        },
        "condition.Condition": {
            "type": "object",
            "properties": {
                "client": {
                    "description": "Client is the user/jwt user that requested the condition.",
                    "type": "string"
                },
                "createdAt": {
                    "description": "CreatedAt is when this object was created.",
                    "type": "string"
                },
                "failOnCheckpointError": {
                    "description": "Should the worker executing this condition fail if its unable to checkpoint\nthe status of work on this condition.",
                    "type": "boolean"
                },
                "fault": {
                    "description": "Fault is used to introduce faults into the controller when executing on a condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/condition.Fault"
                        }
                    ]
                },
                "id": {
                    "description": "ID is the identifier for this condition.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is one of Kind.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/condition.Kind"
                        }
                    ]
                },
                "parameters": {
                    "description": "Parameters is a JSON object that is agreed upon by the controller\nreconciling the condition and the client requesting the condition.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "spanID": {
                    "description": "SpanID enables tracking a Condition and any associated Conditions",
                    "type": "string"
                },
                "state": {
                    "description": "State is one of State",
                    "allOf": [
                        {
                            "$ref": "#/definitions/condition.State"
                        }
                    ]
                },
                "status": {
                    "description": "Status is a JSON object that is agreed upon by the controller\nreconciling the condition and the client requesting the condition.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "target": {
                    "description": "Target is the identifier for the target server this Condition is applicable for.",
                    "type": "string"
                },
                "traceID": {
                    "description": "TraceID enables tracking a Condition and any associated Conditions",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "UpdatedAt is when this object was last updated.",
                    "type": "string"
                },
                "version": {
                    "description": "Version identifies the revision number for this struct.",
                    "type": "string"
                }
            }
        },
        "condition.Fault": {
            "type": "object",
            "properties": {
                "delayDuration": {
                    "description": "Introduce specified delay in execution of the condition on the controller.\n\naccepts the string format of time.Duration - 5s, 5m, 5h",
                    "type": "string"
                },
                "failAt": {
                    "description": "FailAt is a controller specific task/stage that the condition should fail in execution.\n\nfor example, in the flasher controller, setting this field to ` + "`" + `init` + "`" + ` will cause the\ncondition task to fail at initialization.",
                    "type": "string"
                },
                "panic": {
                    "description": "will cause the condition execution to panic on the controller.",
                    "type": "boolean"
                }
            }
        },
        "condition.Firmware": {
            "type": "object",
            "properties": {
                "URL": {
                    "type": "string"
                },
                "checksum": {
                    "type": "string"
                },
                "component": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "install_inband": {
                    "type": "boolean"
                },
                "models": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "oem": {
                    "type": "boolean"
                },
                "vendor": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "condition.FirmwareInstallTaskParameters": {
            "type": "object",
            "properties": {
                "asset_id": {
                    "description": "Inventory identifier for the asset to install firmware on.",
                    "type": "string"
                },
                "dry_run": {
                    "description": "When defined, flasher will not perform any disruptive actions on the asset,\nit will download the firmware to be installed and determine if the firmware is applicable for the device.\n\nNo firmware installs will be attempted and if the device is powered off, it will not be powered on.",
                    "type": "boolean"
                },
                "firmware_set_id": {
                    "description": "FirmwareSetID specifies the firmware set to be applied.",
                    "type": "string"
                },
                "firmwares": {
                    "description": "Firmwares is the list of firmwares to be installed.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/condition.Firmware"
                    }
                },
                "force_install": {
                    "description": "Force install given firmware regardless of current firmware version.",
                    "type": "boolean"
                },
                "require_host_powered_off": {
                    "description": "When true, flasher will expect the host to be powered off before proceeding,\nif the host is not already powered off - the install task will be failed.",
                    "type": "boolean"
                },
                "reset_bmc_before_install": {
                    "description": "Reset device BMC before firmware install",
                    "type": "boolean"
                }
            }
        },
        "condition.Kind": {
            "type": "string",
            "enum": [
                "serverControl",
                "biosControl",
                "broker",
                "broker.acquireServer",
                "broker.releaseServer",
                "inventory",
                "firmwareInstall",
                "firmwareInstallInband",
                "virtualMediaMount"
            ],
            "x-enum-varnames": [
                "ServerControl",
                "BiosControl",
                "Broker",
                "BrokerAcquireServer",
                "BrokerReleaseServer",
                "Inventory",
                "FirmwareInstall",
                "FirmwareInstallInband",
                "VirtualMediaMount"
            ]
        },
        "condition.State": {
            "type": "string",
            "enum": [
                "pending",
                "active",
                "failed",
                "succeeded"
            ],
            "x-enum-varnames": [
                "Pending",
                "Active",
                "Failed",
                "Succeeded"
            ]
        },
        "condition.StatusMsg": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                },
                "ts": {
                    "type": "string"
                }
            }
        },
        "condition.StatusRecord": {
            "type": "object",
            "properties": {
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/condition.StatusMsg"
                    }
                }
            }
        },
        "condition.Task-any-any": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "data": {
                    "description": "Data holds Condition Task specific data"
                },
                "facility_code": {
                    "description": "FacilityCode identifies the facility this task is to be executed in.",
                    "type": "string"
                },
                "fault": {
                    "description": "Fault is a field to inject failures into a flasher task execution,\nthis is set from the Condition only when the worker is run with fault-injection enabled.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/condition.Fault"
                        }
                    ]
                },
                "id": {
                    "description": "Task unique identifier, this is set to the Condition identifier.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of Condition this Task is derived from",
                    "allOf": [
                        {
                            "$ref": "#/definitions/condition.Kind"
                        }
                    ]
                },
                "parameters": {
                    "description": "Parameters holds Condition specific parameters for this task"
                },
                "server": {
                    "description": "Server holds attributes about target server this task is for.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Server"
                        }
                    ]
                },
                "spanID": {
                    "type": "string"
                },
                "state": {
                    "description": "state is the state of the install",
                    "allOf": [
                        {
                            "$ref": "#/definitions/condition.State"
                        }
                    ]
                },
                "status": {
                    "description": "status holds informational data on the state",
                    "allOf": [
                        {
                            "$ref": "#/definitions/condition.StatusRecord"
                        }
                    ]
                },
                "task_version": {
                    "description": "StructVersion indicates the Task object version and is used to determine Task  compatibility.",
                    "type": "string"
                },
                "traceID": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "worker_id": {
                    "description": "WorkerID is the identifier for the worker executing this task.",
                    "type": "string"
                }
            }
        },
        "github_com_metal-automata_conditionorc_pkg_api_v1_conditions_types.ServerResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "records": {
                    "$ref": "#/definitions/types.ConditionsResponse"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "github_com_metal-automata_conditionorc_pkg_api_v1_orchestrator_types.ServerResponse": {
            "type": "object",
            "properties": {
                "condition": {
                    "$ref": "#/definitions/condition.Condition"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                },
                "task": {
                    "$ref": "#/definitions/condition.Task-any-any"
                }
            }
        },
        "routes.FirmwareValidationRequest": {
            "type": "object",
            "required": [
                "firmware_set_id",
                "server_id"
            ],
            "properties": {
                "firmware_set_id": {
                    "type": "string"
                },
                "server_id": {
                    "type": "string"
                }
            }
        },
        "types.Component": {
            "type": "object",
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/types.ComponentAttributes"
                },
                "firmware": {
                    "$ref": "#/definitions/common.Firmware"
                },
                "id": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/common.Status"
                },
                "updated": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "types.ComponentAttributes": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "block_size_bytes": {
                    "type": "integer"
                },
                "bus_info": {
                    "type": "string"
                },
                "capabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.Capability"
                    }
                },
                "capable_speed_gbps": {
                    "type": "integer"
                },
                "capacity_bytes": {
                    "type": "integer"
                },
                "chassis_type": {
                    "type": "string"
                },
                "clock_speed_hz": {
                    "type": "integer"
                },
                "cores": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "drive_type": {
                    "type": "string"
                },
                "form_factor": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interface_type": {
                    "type": "string"
                },
                "macaddress": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "negotiated_speed_gbps": {
                    "type": "integer"
                },
                "oem": {
                    "type": "boolean"
                },
                "oem_id": {
                    "type": "string"
                },
                "part_number": {
                    "type": "string"
                },
                "physid": {
                    "type": "string"
                },
                "power_capacity_watts": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "size_bytes": {
                    "type": "integer"
                },
                "slot": {
                    "type": "string"
                },
                "smart_errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "smart_status": {
                    "type": "string"
                },
                "speed_bits": {
                    "type": "integer"
                },
                "speed_gbps": {
                    "type": "integer"
                },
                "storage_controller": {
                    "type": "string"
                },
                "supported_controller_protocol": {
                    "type": "string"
                },
                "supported_device_protocol": {
                    "type": "string"
                },
                "supported_raid_types": {
                    "type": "string"
                },
                "threads": {
                    "type": "integer"
                },
                "wwn": {
                    "type": "string"
                }
            }
        },
        "types.ConditionsResponse": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/condition.Condition"
                    }
                },
                "serverID": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/condition.State"
                }
            }
        },
        "types.Server": {
            "type": "object",
            "properties": {
                "bios_cfg": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "bmc_address": {
                    "type": "string"
                },
                "bmc_password": {
                    "type": "string"
                },
                "bmc_user": {
                    "type": "string"
                },
                "components": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Component"
                    }
                },
                "facility": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "url.URL": {
            "type": "object",
            "properties": {
                "forceQuery": {
                    "description": "append a query ('?') even if RawQuery is empty",
                    "type": "boolean"
                },
                "fragment": {
                    "description": "fragment for references, without '#'",
                    "type": "string"
                },
                "host": {
                    "description": "host or host:port (see Hostname and Port methods)",
                    "type": "string"
                },
                "omitHost": {
                    "description": "do not emit empty host (authority)",
                    "type": "boolean"
                },
                "opaque": {
                    "description": "encoded opaque data",
                    "type": "string"
                },
                "path": {
                    "description": "path (relative paths may omit leading slash)",
                    "type": "string"
                },
                "rawFragment": {
                    "description": "encoded fragment hint (see EscapedFragment method)",
                    "type": "string"
                },
                "rawPath": {
                    "description": "encoded path hint (see EscapedPath method)",
                    "type": "string"
                },
                "rawQuery": {
                    "description": "encoded query values, without '?'",
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "user": {
                    "description": "username and password information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.Userinfo"
                        }
                    ]
                }
            }
        },
        "url.Userinfo": {
            "type": "object"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Condition orchestrator API",
	Description:      "Conditions API expose CRUD actions to condition objects on servers",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
